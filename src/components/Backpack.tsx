/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 -T -t scene.gltf --shadows
Author: lionarts3d (https://sketchfab.com/lionarts3d)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/backpack-fridge-0fa1173062ee4eef9fb5e1a566cf3ede
Title: Backpack fridge
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useControls } from "leva";

type GLTFResult = GLTF & {
  nodes: {
    extra_extra_0: THREE.Mesh;
    base_base_0: THREE.Mesh;
  };
  materials: {
    extra: THREE.MeshStandardMaterial;
    base: THREE.MeshStandardMaterial;
  };
};

export const Backpack = React.forwardRef<
  THREE.Group,
  JSX.IntrinsicElements["group"]
>((props, ref) => {
  const { nodes, materials } = useGLTF(
    "/models/backpack/scene-transformed.glb"
  ) as GLTFResult;

  useControls("Backpack", () => {
    const props: Record<string, any> = {};

    Object.values(materials).forEach((material) => {
      props[material.name] = {
        image: "",
        onChange: (image: string) => {
          if (image) {
            const texture = new THREE.TextureLoader().load(image);
            material.map = texture;
          }
        },
      };
    });

    return props;
  });

  const hoverHandler = (e: any, materialName: "extra" | "base") => {
    e.stopPropagation();
    if (materialName === "extra") {
      (
        document.getElementsByClassName(
          "leva-c-bSezwh"
        ) as HTMLCollectionOf<HTMLDivElement>
      )[0]?.focus();
    } else if (materialName === "base") {
      (
        document.getElementsByClassName(
          "leva-c-bSezwh"
        ) as HTMLCollectionOf<HTMLDivElement>
      )[1]?.focus();
    }
  };

  return (
    <group {...props} dispose={null} ref={ref}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.extra_extra_0.geometry}
        material={materials.extra}
        position={[4.212, 1.597, 4.359]}
        rotation={[-Math.PI / 2, 0, 0]}
        onPointerOver={(e) => hoverHandler(e, "extra")}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.base_base_0.geometry}
        material={materials.base}
        position={[0, -4.359, 1.597]}
        rotation={[-Math.PI / 2, 0, 0]}
        onPointerOver={(e) => hoverHandler(e, "base")}
      />
    </group>
  );
});

useGLTF.preload("/models/backpack/scene-transformed.glb");
